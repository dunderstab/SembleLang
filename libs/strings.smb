//      Standard Strings library for SembleLang v1.0.0 to ?
//      -------------------------------
//        Dependencies are as follows
//
//          - SembleLang v1+
//          - Access to libc (default compilation)
//          - Semble "base.smb"
//       
//        This library is under the same license as SembleLang itself, as it comes with the language.
//        This liscense being the MIT license:    
//        
// MIT License
//
// Copyright (c) 2021 dunderstab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//        
//        That is all, here is the code.
//
//          - dunder @ SembleLang Team

~
        Imports are pretty simple.

        Just the "io.smb" and "base.smb" libaries.
~

#include base.smb

~
    The data structures are simple.
~

new struct String {
    value,
    length,
    location
}

~
    Now for the functions.
~

fn String(value) => {
    String str =  value;
    let len = strlen(value);
    str.length = len;
    str.location = @str;
    return str;
}

fn stringLength(str) => {
    Size strsize = false;
    strsize.size = strlen(str);
    return strsize;
}

fn nullLength(value) => {
    return strlen(value);
}

fn areStringsEqual(string1, string2) => {
    string1 as struct String;
    string2 as struct String;
    if strcmp(string1.value, string2.value) = 0;
        return true;
    endif;
    return false;
}

fn copyString(string1, string2) => {
    string1 as struct String;
    string2 as struct String;
    strcpy(string1.value, string2.value);
    return 0;
}

fn stringCat(string1, string2) => {
    string1 as struct String;
    string2 as struct String;
    let s = Space(1000);
    s as struct Space;
    strcpy(s.space, string1.value);
    strcat(s.space, string2.value);
    return s;
}

// Operators

fn String__add__(string1, string2) => {
    string1 as struct String;
    string2 as struct String;
    let s = Space(1000); 
    s as struct Space;
    let x = string1.value;
    strcpy(s.space, x);
    strcat(s.space, string2.value);
    String bs = s.space;
    return bs;
}