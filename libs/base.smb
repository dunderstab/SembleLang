//      Base library for SembleLang v1.0.0 to ?
//       
//        This library is under the same license as SembleLang itself, as it comes with the language.
//        This liscense being the MIT license:    
//        
// MIT License
//
// Copyright (c) 2021 dunderstab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//        
//        That is all, here is the code.
//
//          - dunder @ SembleLang Team

// Structs

new struct Size {
    size
}

new struct Space {
    space,
    size
}

// Constants

const LINUX_SYSCALL = 0x80;
const NULL = 0;

// Functions

fn Size(n) => {
    Size size = n;
    return size;
}

fn Space(size) => {
    let spacePtr = malloc(size);
    Space space = spacePtr, size;
    return space;
}

fn resizeSpace(space, newSize) => {
    space as struct Space;
    let spacePtr = space.space;
    let s = Space(newSize);
    memcpy(s.space, spacePtr);
    free(spacePtr);
    return s;
}

fn write(data, size, fileDescriptor) => {
    asm "movl ~~size, %edx";
    asm "movl ~~data, %ecx";
    asm "movl ~~fileDescriptor, %ebx";
    asm "movl $4, %eax";
    asm "int $0x80";
    return 0;
}

fn read(buffer, size, fileDescriptor) => {
    asm "movl ~~size, %edx";
    asm "movl ~~buffer, %ecx";
    asm "movl ~~fileDescriptor, %ebx";
    asm "movl $3, %eax";
    asm "int $0x80";
    return 0;
}

~
    Semble STDLIB Reference -
        + "base.smb"
            + Size (struct)
                + size - integer
            + Space (struct)
                + space - pointer to space
                + size - integer
            + Size (function) - returns object of type Size
                + n - integer
            + Space (function) - returns object of type Space
                + n - integer
            + resizeSpace (function) - returns Nothing
                + space - space variable
                + newSize - integer
            + write (function) - returns Nothing
                + data - data to write
                + size - integer
                + fileDescriptor - fileDescriptor/filePointer to location
        + "strings.smb"
            + String (struct)
                + value - str
                + length - integer
                + location - hex value
            + createString (function) - returns object of type String
                + value - String
            + str
~