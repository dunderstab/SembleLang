//      Standard Vector library for SembleLang v1.0.0 to ?
//      -------------------------------
//        Dependencies are as follows
//
//          - SembleLang v1+
//          - Access to libc (default compilation)
//          - Semble "base.smb"
//          - Semble "io.smb"
//          - Semble "strings.smb"
//       
//        This library is under the same license as SembleLang itself, as it comes with the language.
//        This liscense being the MIT license:    
//        
// MIT License
//
// Copyright (c) 2021 dunderstab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//        
//        That is all, here is the code.
//
//          - dunder @ SembleLang Team

// Imports

#include base.smb
#include io.smb
#include strings.smb

// Structs

new struct Vector {
    value,
    length
}

// Vector Constructor

fn Vector(length, arr) => {
    Vector v = arr, length;
    return v;
}

// Functions

fn append(v, data) => {
    v as struct Vector;
    let l = v.length;
    let ve = Vector(l + 1, [l + 1][0, 0]);
    memcpy(ve.value, v.value, l * 4);
    ve.value[l] = data;
    v.value = ve.value;
    v.length = ve.length;
    return 0;
}

fn printIntegerVector(v) => {
    v as struct Vector;
    printf("Printing Vector<int> of length: %d\n", v.length);
    for i from 0 to v.length - 1;
        printf("v[%d] = %d\n", i, v.value[i]);
    endfor;
    return 0;
}

fn printStrVector(v) => {
    v as struct Vector;
    printf("Printing Vector<str> of length: %d\n", v.length);
    for i from 0 to v.length - 1;
        printf("v[%d] = %s\n", i, v.value[i]);
    endfor;
    return 0;
}

fn printStringVector(v) => {
    v as struct Vector;
    printf("Printing Vector<String> of length: %d\n", v.length);
    for i from 0 to v.length - 1;
        let a = v.value[i];
        a as struct String;
        printf("v[%d] = %s\n", i, a.value);
    endfor;
    return 0;
}

fn copyVectorUntil(newArr, oldArr, index) => {
    newArr as struct Vector;
    oldArr as struct Vector;
    let n = newArr.value;
    let o = oldArr.value;
    let x = index;
    memcpy(n, o, x * 4);
    return 0;
}

fn copyVectorStartingAt(newArr, oldArr, index) => {
    newArr as struct Vector;
    oldArr as struct Vector;
    let n = newArr.value;
    let o = oldArr.value;
    let nindex = index + 1;
    let newArrStart = n + index * 4;
    let oldArrStart = o + nindex * 4;
    let memcpyAmount = oldArr.length - index;
    memcpy(newArrStart, oldArrStart, memcpyAmount * 4);
    return 0;
}

fn pop(v, index) => {
    v as struct Vector;
    if v.length < index + 1;
        printf("[Semble \"vector.smb\"] Error: 'pop(..., %d)': Vector's length (%d) is smaller than the index {%d}!\n", index, v.length - 1, index);
        quit 1;
    endif;
    let newLength = v.length - 1;
    let newArr = Vector(newLength, [newLength][0, 0]);
    copyVectorUntil(newArr, v, index);
    copyVectorStartingAt(newArr, v, index);
    v.length = v.length - 1;
    v.value = newArr.value;
    return 0;
}

fn vectorLength(v) => {
    v as struct Vector;
    return v.length;
}

fn remove(v, value) => {
    v as struct Vector;
    for i from 0 to v.length - 1;
        if v[i] = value;
            pop(v, i);
            return 0;
        endif;
    endfor;
    return 1;
}

fn removeAll(v, value) => {
    v as struct Vector;
    while true = true;
        if remove(v, value) = 1;
            break;
        endif;
    endwhile;
    return 0;
}